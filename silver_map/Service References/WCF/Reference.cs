//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.225
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace silver_map.WCF {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="city_info", Namespace="http://schemas.datacontract.org/2004/07/Timemap_searchService")]
    public partial class city_info : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double bus_timeField;
        
        private string central_city_nameField;
        
        private int city_dimensionField;
        
        private int city_idField;
        
        private string city_nameField;
        
        private int city_rankField;
        
        private string descriptionField;
        
        private bool is_central_cityField;
        
        private double plane_timeField;
        
        private int populationField;
        
        private int scenery_pointField;
        
        private double train_timeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double bus_time {
            get {
                return this.bus_timeField;
            }
            set {
                if ((this.bus_timeField.Equals(value) != true)) {
                    this.bus_timeField = value;
                    this.RaisePropertyChanged("bus_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string central_city_name {
            get {
                return this.central_city_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.central_city_nameField, value) != true)) {
                    this.central_city_nameField = value;
                    this.RaisePropertyChanged("central_city_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int city_dimension {
            get {
                return this.city_dimensionField;
            }
            set {
                if ((this.city_dimensionField.Equals(value) != true)) {
                    this.city_dimensionField = value;
                    this.RaisePropertyChanged("city_dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int city_id {
            get {
                return this.city_idField;
            }
            set {
                if ((this.city_idField.Equals(value) != true)) {
                    this.city_idField = value;
                    this.RaisePropertyChanged("city_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city_name {
            get {
                return this.city_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.city_nameField, value) != true)) {
                    this.city_nameField = value;
                    this.RaisePropertyChanged("city_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int city_rank {
            get {
                return this.city_rankField;
            }
            set {
                if ((this.city_rankField.Equals(value) != true)) {
                    this.city_rankField = value;
                    this.RaisePropertyChanged("city_rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool is_central_city {
            get {
                return this.is_central_cityField;
            }
            set {
                if ((this.is_central_cityField.Equals(value) != true)) {
                    this.is_central_cityField = value;
                    this.RaisePropertyChanged("is_central_city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double plane_time {
            get {
                return this.plane_timeField;
            }
            set {
                if ((this.plane_timeField.Equals(value) != true)) {
                    this.plane_timeField = value;
                    this.RaisePropertyChanged("plane_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int population {
            get {
                return this.populationField;
            }
            set {
                if ((this.populationField.Equals(value) != true)) {
                    this.populationField = value;
                    this.RaisePropertyChanged("population");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int scenery_point {
            get {
                return this.scenery_pointField;
            }
            set {
                if ((this.scenery_pointField.Equals(value) != true)) {
                    this.scenery_pointField = value;
                    this.RaisePropertyChanged("scenery_point");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double train_time {
            get {
                return this.train_timeField;
            }
            set {
                if ((this.train_timeField.Equals(value) != true)) {
                    this.train_timeField = value;
                    this.RaisePropertyChanged("train_time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF.ISearch_city")]
    public interface ISearch_city {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISearch_city/search_city", ReplyAction="http://tempuri.org/ISearch_city/search_cityResponse")]
        System.IAsyncResult Beginsearch_city(string central_city_name, int city_rank, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<silver_map.WCF.city_info> Endsearch_city(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISearch_city/query_city", ReplyAction="http://tempuri.org/ISearch_city/query_cityResponse")]
        System.IAsyncResult Beginquery_city(string central_city, string des_city, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<silver_map.WCF.city_info> Endquery_city(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISearch_city/shortest_time", ReplyAction="http://tempuri.org/ISearch_city/shortest_timeResponse")]
        System.IAsyncResult Beginshortest_time(string central_city, string des_city, System.AsyncCallback callback, object asyncState);
        
        double Endshortest_time(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISearch_cityChannel : silver_map.WCF.ISearch_city, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class search_cityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public search_cityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<silver_map.WCF.city_info> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<silver_map.WCF.city_info>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class query_cityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public query_cityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<silver_map.WCF.city_info> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<silver_map.WCF.city_info>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class shortest_timeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public shortest_timeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Search_cityClient : System.ServiceModel.ClientBase<silver_map.WCF.ISearch_city>, silver_map.WCF.ISearch_city {
        
        private BeginOperationDelegate onBeginsearch_cityDelegate;
        
        private EndOperationDelegate onEndsearch_cityDelegate;
        
        private System.Threading.SendOrPostCallback onsearch_cityCompletedDelegate;
        
        private BeginOperationDelegate onBeginquery_cityDelegate;
        
        private EndOperationDelegate onEndquery_cityDelegate;
        
        private System.Threading.SendOrPostCallback onquery_cityCompletedDelegate;
        
        private BeginOperationDelegate onBeginshortest_timeDelegate;
        
        private EndOperationDelegate onEndshortest_timeDelegate;
        
        private System.Threading.SendOrPostCallback onshortest_timeCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Search_cityClient() {
        }
        
        public Search_cityClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Search_cityClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Search_cityClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Search_cityClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<search_cityCompletedEventArgs> search_cityCompleted;
        
        public event System.EventHandler<query_cityCompletedEventArgs> query_cityCompleted;
        
        public event System.EventHandler<shortest_timeCompletedEventArgs> shortest_timeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult silver_map.WCF.ISearch_city.Beginsearch_city(string central_city_name, int city_rank, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginsearch_city(central_city_name, city_rank, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<silver_map.WCF.city_info> silver_map.WCF.ISearch_city.Endsearch_city(System.IAsyncResult result) {
            return base.Channel.Endsearch_city(result);
        }
        
        private System.IAsyncResult OnBeginsearch_city(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string central_city_name = ((string)(inValues[0]));
            int city_rank = ((int)(inValues[1]));
            return ((silver_map.WCF.ISearch_city)(this)).Beginsearch_city(central_city_name, city_rank, callback, asyncState);
        }
        
        private object[] OnEndsearch_city(System.IAsyncResult result) {
            System.Collections.Generic.List<silver_map.WCF.city_info> retVal = ((silver_map.WCF.ISearch_city)(this)).Endsearch_city(result);
            return new object[] {
                    retVal};
        }
        
        private void Onsearch_cityCompleted(object state) {
            if ((this.search_cityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.search_cityCompleted(this, new search_cityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void search_cityAsync(string central_city_name, int city_rank) {
            this.search_cityAsync(central_city_name, city_rank, null);
        }
        
        public void search_cityAsync(string central_city_name, int city_rank, object userState) {
            if ((this.onBeginsearch_cityDelegate == null)) {
                this.onBeginsearch_cityDelegate = new BeginOperationDelegate(this.OnBeginsearch_city);
            }
            if ((this.onEndsearch_cityDelegate == null)) {
                this.onEndsearch_cityDelegate = new EndOperationDelegate(this.OnEndsearch_city);
            }
            if ((this.onsearch_cityCompletedDelegate == null)) {
                this.onsearch_cityCompletedDelegate = new System.Threading.SendOrPostCallback(this.Onsearch_cityCompleted);
            }
            base.InvokeAsync(this.onBeginsearch_cityDelegate, new object[] {
                        central_city_name,
                        city_rank}, this.onEndsearch_cityDelegate, this.onsearch_cityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult silver_map.WCF.ISearch_city.Beginquery_city(string central_city, string des_city, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginquery_city(central_city, des_city, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<silver_map.WCF.city_info> silver_map.WCF.ISearch_city.Endquery_city(System.IAsyncResult result) {
            return base.Channel.Endquery_city(result);
        }
        
        private System.IAsyncResult OnBeginquery_city(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string central_city = ((string)(inValues[0]));
            string des_city = ((string)(inValues[1]));
            return ((silver_map.WCF.ISearch_city)(this)).Beginquery_city(central_city, des_city, callback, asyncState);
        }
        
        private object[] OnEndquery_city(System.IAsyncResult result) {
            System.Collections.Generic.List<silver_map.WCF.city_info> retVal = ((silver_map.WCF.ISearch_city)(this)).Endquery_city(result);
            return new object[] {
                    retVal};
        }
        
        private void Onquery_cityCompleted(object state) {
            if ((this.query_cityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.query_cityCompleted(this, new query_cityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void query_cityAsync(string central_city, string des_city) {
            this.query_cityAsync(central_city, des_city, null);
        }
        
        public void query_cityAsync(string central_city, string des_city, object userState) {
            if ((this.onBeginquery_cityDelegate == null)) {
                this.onBeginquery_cityDelegate = new BeginOperationDelegate(this.OnBeginquery_city);
            }
            if ((this.onEndquery_cityDelegate == null)) {
                this.onEndquery_cityDelegate = new EndOperationDelegate(this.OnEndquery_city);
            }
            if ((this.onquery_cityCompletedDelegate == null)) {
                this.onquery_cityCompletedDelegate = new System.Threading.SendOrPostCallback(this.Onquery_cityCompleted);
            }
            base.InvokeAsync(this.onBeginquery_cityDelegate, new object[] {
                        central_city,
                        des_city}, this.onEndquery_cityDelegate, this.onquery_cityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult silver_map.WCF.ISearch_city.Beginshortest_time(string central_city, string des_city, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginshortest_time(central_city, des_city, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double silver_map.WCF.ISearch_city.Endshortest_time(System.IAsyncResult result) {
            return base.Channel.Endshortest_time(result);
        }
        
        private System.IAsyncResult OnBeginshortest_time(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string central_city = ((string)(inValues[0]));
            string des_city = ((string)(inValues[1]));
            return ((silver_map.WCF.ISearch_city)(this)).Beginshortest_time(central_city, des_city, callback, asyncState);
        }
        
        private object[] OnEndshortest_time(System.IAsyncResult result) {
            double retVal = ((silver_map.WCF.ISearch_city)(this)).Endshortest_time(result);
            return new object[] {
                    retVal};
        }
        
        private void Onshortest_timeCompleted(object state) {
            if ((this.shortest_timeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.shortest_timeCompleted(this, new shortest_timeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void shortest_timeAsync(string central_city, string des_city) {
            this.shortest_timeAsync(central_city, des_city, null);
        }
        
        public void shortest_timeAsync(string central_city, string des_city, object userState) {
            if ((this.onBeginshortest_timeDelegate == null)) {
                this.onBeginshortest_timeDelegate = new BeginOperationDelegate(this.OnBeginshortest_time);
            }
            if ((this.onEndshortest_timeDelegate == null)) {
                this.onEndshortest_timeDelegate = new EndOperationDelegate(this.OnEndshortest_time);
            }
            if ((this.onshortest_timeCompletedDelegate == null)) {
                this.onshortest_timeCompletedDelegate = new System.Threading.SendOrPostCallback(this.Onshortest_timeCompleted);
            }
            base.InvokeAsync(this.onBeginshortest_timeDelegate, new object[] {
                        central_city,
                        des_city}, this.onEndshortest_timeDelegate, this.onshortest_timeCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override silver_map.WCF.ISearch_city CreateChannel() {
            return new Search_cityClientChannel(this);
        }
        
        private class Search_cityClientChannel : ChannelBase<silver_map.WCF.ISearch_city>, silver_map.WCF.ISearch_city {
            
            public Search_cityClientChannel(System.ServiceModel.ClientBase<silver_map.WCF.ISearch_city> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult Beginsearch_city(string central_city_name, int city_rank, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = central_city_name;
                _args[1] = city_rank;
                System.IAsyncResult _result = base.BeginInvoke("search_city", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<silver_map.WCF.city_info> Endsearch_city(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<silver_map.WCF.city_info> _result = ((System.Collections.Generic.List<silver_map.WCF.city_info>)(base.EndInvoke("search_city", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Beginquery_city(string central_city, string des_city, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = central_city;
                _args[1] = des_city;
                System.IAsyncResult _result = base.BeginInvoke("query_city", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<silver_map.WCF.city_info> Endquery_city(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<silver_map.WCF.city_info> _result = ((System.Collections.Generic.List<silver_map.WCF.city_info>)(base.EndInvoke("query_city", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Beginshortest_time(string central_city, string des_city, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = central_city;
                _args[1] = des_city;
                System.IAsyncResult _result = base.BeginInvoke("shortest_time", _args, callback, asyncState);
                return _result;
            }
            
            public double Endshortest_time(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("shortest_time", _args, result)));
                return _result;
            }
        }
    }
}
